defmodule IoTProxyHoneypot do
  @moduledoc """
  Proxy Honeypot Avanzado para Dispositivos IoT

  Este sistema act√∫a como un proxy transparente hacia dispositivos IoT reales,
  pero monitorea y analiza todo el tr√°fico malicioso para detectar:
  - Intentos de exploit conocidos y zero-days
  - Ataques de autenticaci√≥n
  - Scanning automatizado
  - Compromisos exitosos
  - An√°lisis de comportamiento post-compromiso

  LEGAL: Solo para uso en redes propias con dispositivos controlados.
  """

  require Logger
  use GenServer

  # Configuraci√≥n de dispositivos IoT objetivo
  @iot_targets %{
    # C√°maras IP
    hikvision: %{
      ports: [80, 8080, 554],
      device_type: :ip_camera,
      default_credentials: [{"admin", "12345"}, {"admin", "admin"}, {"root", "12345"}],
      vulnerable_paths: ["/dvr/", "/cgi-bin/", "/ISAPI/", "/SDK/"],
      fingerprints: ["Server: App-webs", "WWW-Authenticate: Digest"],
      known_exploits: [:cve_2017_7921, :cve_2021_36260, :directory_traversal]
    },

    # Routers
    dlink: %{
      ports: [80, 8080, 443],
      device_type: :router,
      default_credentials: [{"admin", ""}, {"admin", "admin"}, {"user", "user"}],
      vulnerable_paths: ["/cgi-bin/", "/tools_admin.php", "/getcfg.php"],
      fingerprints: ["Server: GoAhead-Webs", "D-Link"],
      known_exploits: [:cve_2019_17621, :cve_2020_25078, :command_injection]
    },

    # DVRs
    dahua: %{
      ports: [80, 37777, 554],
      device_type: :dvr,
      default_credentials: [{"admin", "admin"}, {"888888", "888888"}],
      vulnerable_paths: ["/current_config", "/cgi-bin/", "/RPC2_Login"],
      fingerprints: ["Server: Webs", "Dahua"],
      known_exploits: [:cve_2021_33044, :cve_2020_9054, :auth_bypass]
    },

    # Impresoras
    hp_printer: %{
      ports: [80, 443, 631, 9100],
      device_type: :printer,
      default_credentials: [{"admin", ""}, {"admin", "admin"}],
      vulnerable_paths: ["/hp/", "/SSI/", "/dev/"],
      fingerprints: ["Server: HP HTTP Server", "HP "],
      known_exploits: [:path_traversal, :information_disclosure, :rce]
    },

    # Dispositivos gen√©ricos
    generic_iot: %{
      ports: [80, 8080, 81, 8081, 9000],
      device_type: :generic,
      default_credentials: [{"admin", "admin"}, {"admin", "123456"}, {"root", "root"}],
      vulnerable_paths: ["/cgi-bin/", "/admin/", "/api/", "/web/"],
      fingerprints: ["boa/", "lighttpd", "mini_httpd"],
      known_exploits: [:default_credentials, :weak_auth, :command_injection]
    }
  }

  # Patrones de ataque conocidos
  @attack_patterns %{
    # Exploits conocidos
    directory_traversal: [
      ~r/\.\.\/.*\.\.\/.*\.\.\//,
      ~r/\.\.\\.*\.\.\\.*\.\.\\/,
      ~r/\/etc\/passwd/,
      ~r/\/proc\/version/,
      ~r/\/windows\/system32\//i
    ],

    command_injection: [
      ~r/[;&|`$()]/,
      ~r/\b(cat|ls|pwd|whoami|id|uname|nc|wget|curl)\b/i,
      ~r/\$\(.*\)/,
      ~r/`.*`/,
      ~r/\|\s*(ls|cat|pwd)/i
    ],

    sql_injection: [
      ~r/(\bUNION\b.*\bSELECT\b)/i,
      ~r/(\bOR\b.*\b1=1\b)/i,
      ~r/(\';.*--)/i,
      ~r/(\bdrop\b.*\btable\b)/i
    ],

    xss_attempts: [
      ~r/<script[^>]*>.*<\/script>/i,
      ~r/javascript:/i,
      ~r/on\w+\s*=/i,
      ~r/<iframe[^>]*>/i
    ],

    # Scanning patterns
    automated_scanning: [
      ~r/nmap/i,
      ~r/masscan/i,
      ~r/nikto/i,
      ~r/sqlmap/i,
      ~r/burp/i,
      ~r/zap/i
    ],

    # Exploit frameworks
    exploit_frameworks: [
      ~r/metasploit/i,
      ~r/exploit/i,
      ~r/payload/i,
      ~r/shellcode/i
    ],

    # IoT specific attacks
    iot_specific: [
      ~r/\/cgi-bin\/luci/,
      ~r/\/rom-0/,
      ~r/\/proc\/kcore/,
      ~r/\/dev\/mtd/,
      ~r/firmware/i,
      ~r/busybox/i
    ]
  }

  # Zero-day detection patterns
  @anomaly_indicators [
    :unusual_path_structure,
    :unexpected_parameter_names,
    :abnormal_payload_size,
    :suspicious_encoding,
    :unusual_http_methods,
    :unexpected_headers,
    :timing_anomalies,
    :behavioral_anomalies
  ]

  defstruct [
    :honeypot_id,
    :target_devices,
    :proxy_servers,
    :attack_monitor,
    :interaction_analyzer,
    :zero_day_detector,
    :session_tracker,
    :cli_dashboard,
    :forensic_store,
    :active_sessions,
    :attack_database,
    :statistics,
    :start_time
  ]

  ## API Principal

  def start_link(opts \\ []) do
    GenServer.start_link(__MODULE__, opts, name: __MODULE__)
  end

  @doc """
  Inicia el proxy honeypot con dispositivos objetivo.
  """
  def start_honeypot(target_configs) do
    GenServer.call(__MODULE__, {:start_honeypot, target_configs})
  end

  @doc """
  Detiene el honeypot.
  """
  def stop_honeypot do
    GenServer.call(__MODULE__, :stop_honeypot)
  end

  @doc """
  Obtiene estad√≠sticas del honeypot.
  """
  def get_statistics do
    GenServer.call(__MODULE__, :get_statistics)
  end

  @doc """
  Lista interacciones recientes con atacantes.
  """
  def get_recent_interactions(limit \\ 50) do
    GenServer.call(__MODULE__, {:get_interactions, limit})
  end

  @doc """
  Obtiene reporte detallado de una sesi√≥n de ataque.
  """
  def get_attack_report(session_id) do
    GenServer.call(__MODULE__, {:get_attack_report, session_id})
  end

  @doc """
  Inicia el dashboard CLI interactivo.
  """
  def start_cli_dashboard do
    GenServer.call(__MODULE__, :start_cli_dashboard)
  end

  @doc """
  Configura dispositivo IoT objetivo.
  """
  def add_target_device(device_config) do
    GenServer.call(__MODULE__, {:add_target, device_config})
  end

  ## Callbacks del GenServer

  @impl true
  def init(opts) do
    honeypot_id = Keyword.get(opts, :honeypot_id, generate_honeypot_id())

    state = %__MODULE__{
      honeypot_id: honeypot_id,
      target_devices: %{},
      proxy_servers: %{},
      active_sessions: :ets.new(:active_sessions, [:set, :public]),
      attack_database: :ets.new(:attack_database, [:bag, :public]),
      statistics: initialize_statistics(),
      start_time: System.monotonic_time()
    }

    Logger.info("üçØ Proxy Honeypot iniciado - ID: #{honeypot_id}")
    {:ok, state}
  end

  @impl true
  def handle_call({:start_honeypot, target_configs}, _from, state) do
    Logger.info("üöÄ Iniciando proxy honeypot con #{length(target_configs)} dispositivos...")

    new_state = %{state |
      target_devices: setup_target_devices(target_configs),
      proxy_servers: start_proxy_servers(target_configs),
      attack_monitor: start_attack_monitor(),
      interaction_analyzer: start_interaction_analyzer(),
      zero_day_detector: start_zero_day_detector(),
      session_tracker: start_session_tracker(),
      forensic_store: start_forensic_store()
    }

    {:reply, :ok, new_state}
  end

  @impl true
  def handle_call(:stop_honeypot, _from, state) do
    Logger.info("‚èπÔ∏è  Deteniendo proxy honeypot...")
    stop_all_components(state)
    {:reply, :ok, state}
  end

  @impl true
  def handle_call(:get_statistics, _from, state) do
    stats = generate_honeypot_statistics(state)
    {:reply, stats, state}
  end

  @impl true
  def handle_call({:get_interactions, limit}, _from, state) do
    interactions = get_recent_attack_interactions(state.attack_database, limit)
    {:reply, interactions, state}
  end

  @impl true
  def handle_call(:start_cli_dashboard, _from, state) do
    dashboard_pid = spawn_link(fn -> run_honeypot_dashboard(state) end)
    {:reply, {:ok, dashboard_pid}, state}
  end

  @impl true
  def handle_info({:http_request, session_id, request_data}, state) do
    # Procesar request HTTP interceptado
    spawn(fn ->
      process_http_request(session_id, request_data, state)
    end)

    {:noreply, state}
  end

  @impl true
  def handle_info({:http_response, session_id, response_data}, state) do
    # Procesar response del dispositivo real
    spawn(fn ->
      process_http_response(session_id, response_data, state)
    end)

    {:noreply, state}
  end

  @impl true
  def handle_info({:attack_detected, attack_info}, state) do
    Logger.warn("üö® ATAQUE DETECTADO: #{attack_info.type} desde #{attack_info.source_ip}")

    # Almacenar en base de datos de ataques
    :ets.insert(state.attack_database, {System.monotonic_time(), attack_info})

    # Actualizar estad√≠sticas
    new_stats = update_attack_statistics(state.statistics, attack_info)

    {:noreply, %{state | statistics: new_stats}}
  end

  @impl true
  def handle_info({:zero_day_suspected, zero_day_info}, state) do
    Logger.error("üî• POSIBLE ZERO-DAY DETECTADO: #{zero_day_info.signature}")

    # Almacenar con alta prioridad
    zero_day_attack = Map.put(zero_day_info, :priority, :critical)
    :ets.insert(state.attack_database, {System.monotonic_time(), zero_day_attack})

    # Alertar inmediatamente
    spawn(fn -> alert_zero_day_detection(zero_day_info) end)

    {:noreply, state}
  end

  ## Servidor Proxy HTTP

  defp start_proxy_servers(target_configs) do
    proxy_servers = Enum.reduce(target_configs, %{}, fn config, acc ->
      case start_proxy_server_for_device(config) do
        {:ok, server_pid} ->
          Map.put(acc, config.device_id, server_pid)

        {:error, reason} ->
          Logger.error("Error iniciando proxy para #{config.device_id}: #{reason}")
          acc
      end
    end)

    Logger.info("üåê #{map_size(proxy_servers)} servidores proxy iniciados")
    proxy_servers
  end

  defp start_proxy_server_for_device(config) do
    port = config.listen_port

    case :gen_tcp.listen(port, [
      :binary,
      {:active, false},
      {:reuseaddr, true},
      {:packet, :http_bin}
    ]) do
      {:ok, listen_socket} ->
        server_pid = spawn_link(fn ->
          proxy_server_loop(listen_socket, config)
        end)

        Logger.info("üîå Proxy iniciado para #{config.device_type} en puerto #{port}")
        {:ok, server_pid}

      {:error, reason} ->
        {:error, reason}
    end
  end

  defp proxy_server_loop(listen_socket, config) do
    case :gen_tcp.accept(listen_socket) do
      {:ok, client_socket} ->
        # Manejar conexi√≥n en proceso separado
        spawn_link(fn ->
          handle_client_connection(client_socket, config)
        end)

        proxy_server_loop(listen_socket, config)

      {:error, :closed} ->
        Logger.info("Proxy server cerrado para #{config.device_id}")

      {:error, reason} ->
        Logger.error("Error en proxy accept: #{reason}")
        Process.sleep(1000)
        proxy_server_loop(listen_socket, config)
    end
  end

  defp handle_client_connection(client_socket, config) do
    {:ok, {client_ip, client_port}} = :inet.peername(client_socket)
    client_ip_str = :inet.ntoa(client_ip) |> to_string()

    session_id = generate_session_id()
    session_start = System.monotonic_time()

    Logger.debug("üîó Nueva conexi√≥n: #{client_ip_str}:#{client_port} -> #{config.device_id}")

    # Inicializar sesi√≥n
    session = %{
      id: session_id,
      client_ip: client_ip_str,
      client_port: client_port,
      device_config: config,
      start_time: session_start,
      requests: [],
      responses: [],
      attack_indicators: [],
      status: :active
    }

    :ets.insert(:active_sessions, {session_id, session})

    # Manejar requests HTTP
    handle_http_session(client_socket, session, config)
  end

  defp handle_http_session(client_socket, session, config) do
    case receive_http_request(client_socket) do
      {:ok, http_request} ->
        # Analizar request para detectar ataques
        attack_analysis = analyze_http_request(http_request, session, config)

        # Decidir si procesar o bloquear
        action = determine_action(attack_analysis, session)

        case action do
          :forward ->
            # Reenviar al dispositivo real
            response = forward_to_real_device(http_request, config)

            # Analizar response para detectar compromiso
            compromise_analysis = analyze_http_response(response, http_request, session)

            # Enviar response al cliente
            send_response_to_client(client_socket, response)

            # Registrar interacci√≥n
            updated_session = record_interaction(session, http_request, response, attack_analysis, compromise_analysis)
            :ets.insert(:active_sessions, {session.id, updated_session})

            # Continuar sesi√≥n
            handle_http_session(client_socket, updated_session, config)

          :block ->
            # Bloquear ataque obvio
            block_response = generate_block_response(attack_analysis)
            send_response_to_client(client_socket, block_response)
            close_session(client_socket, session, :blocked)

          :honeypot ->
            # Interactuar con honeypot falso
            honeypot_response = generate_honeypot_response(http_request, config)
            send_response_to_client(client_socket, honeypot_response)

            # Continuar para recopilar m√°s informaci√≥n
            handle_http_session(client_socket, session, config)
        end

      {:error, :closed} ->
        close_session(client_socket, session, :client_disconnected)

      {:error, reason} ->
        Logger.debug("Error HTTP en sesi√≥n #{session.id}: #{reason}")
        close_session(client_socket, session, :error)
    end
  end

  ## An√°lisis de Requests HTTP

  defp analyze_http_request(request, session, config) do
    analysis = %{
      timestamp: System.monotonic_time(),
      session_id: session.id,
      source_ip: session.client_ip,
      request: request,
      attack_types: [],
      confidence: 0.0,
      indicators: [],
      severity: :low
    }

    # An√°lisis de patrones conocidos
    known_attack_analysis = detect_known_attacks(request)

    # An√°lisis de anomal√≠as (posibles zero-days)
    anomaly_analysis = detect_request_anomalies(request, session, config)

    # An√°lisis de comportamiento
    behavior_analysis = analyze_session_behavior(session, request)

    # Combinar an√°lisis
    combined_analysis = combine_attack_analysis([
      known_attack_analysis,
      anomaly_analysis,
      behavior_analysis
    ])

    # Determinar severidad final
    final_analysis = %{analysis |
      attack_types: combined_analysis.attack_types,
      confidence: combined_analysis.confidence,
      indicators: combined_analysis.indicators,
      severity: determine_attack_severity(combined_analysis)
    }

    # Enviar a monitor de ataques si es sospechoso
    if final_analysis.confidence > 0.3 do
      send(IoTProxyHoneypot, {:attack_detected, final_analysis})
    end

    final_analysis
  end

  defp detect_known_attacks(request) do
    attack_types = []
    confidence = 0.0
    indicators = []

    # Buscar patrones de directory traversal
    if detect_attack_pattern(request, @attack_patterns.directory_traversal) do
      attack_types = [:directory_traversal | attack_types]
      confidence = confidence + 0.4
      indicators = ["directory_traversal_pattern" | indicators]
    end

    # Buscar inyecci√≥n de comandos
    if detect_attack_pattern(request, @attack_patterns.command_injection) do
      attack_types = [:command_injection | attack_types]
      confidence = confidence + 0.5
      indicators = ["command_injection_pattern" | indicators]
    end

    # Buscar SQL injection
    if detect_attack_pattern(request, @attack_patterns.sql_injection) do
      attack_types = [:sql_injection | attack_types]
      confidence = confidence + 0.4
      indicators = ["sql_injection_pattern" | indicators]
    end

    # Buscar XSS
    if detect_attack_pattern(request, @attack_patterns.xss_attempts) do
      attack_types = [:xss_attempt | attack_types]
      confidence = confidence + 0.3
      indicators = ["xss_pattern" | indicators]
    end

    # Buscar scanning automatizado
    if detect_attack_pattern(request, @attack_patterns.automated_scanning) do
      attack_types = [:automated_scanning | attack_types]
      confidence = confidence + 0.6
      indicators = ["automated_scanner" | indicators]
    end

    # Buscar exploits IoT espec√≠ficos
    if detect_attack_pattern(request, @attack_patterns.iot_specific) do
      attack_types = [:iot_exploit | attack_types]
      confidence = confidence + 0.7
      indicators = ["iot_specific_pattern" | indicators]
    end

    %{
      attack_types: attack_types,
      confidence: min(1.0, confidence),
      indicators: indicators
    }
  end

  defp detect_request_anomalies(request, session, config) do
    anomalies = []
    confidence = 0.0
    indicators = []

    # Anomal√≠a en estructura de path
    if detect_unusual_path_structure(request.path) do
      anomalies = [:unusual_path_structure | anomalies]
      confidence = confidence + 0.2
      indicators = ["unusual_path_structure" | indicators]
    end

    # Par√°metros con nombres sospechosos
    if detect_suspicious_parameters(request.query_string) do
      anomalies = [:suspicious_parameters | anomalies]
      confidence = confidence + 0.3
      indicators = ["suspicious_parameter_names" | indicators]
    end

    # Payload an√≥malamente grande
    if detect_abnormal_payload_size(request) do
      anomalies = [:abnormal_payload_size | anomalies]
      confidence = confidence + 0.2
      indicators = ["abnormal_payload_size" | indicators]
    end

    # Encoding sospechoso
    if detect_suspicious_encoding(request) do
      anomalies = [:suspicious_encoding | anomalies]
      confidence = confidence + 0.3
      indicators = ["suspicious_encoding" | indicators]
    end

    # M√©todos HTTP inusuales
    if detect_unusual_http_methods(request.method) do
      anomalies = [:unusual_http_method | anomalies]
      confidence = confidence + 0.2
      indicators = ["unusual_http_method" | indicators]
    end

    # Headers inesperados
    if detect_unexpected_headers(request.headers) do
      anomalies = [:unexpected_headers | anomalies]
      confidence = confidence + 0.2
      indicators = ["unexpected_headers" | indicators]
    end

    # Si hay m√∫ltiples anomal√≠as, sospechar zero-day
    if length(anomalies) >= 3 and confidence > 0.6 do
      zero_day_info = %{
        type: :suspected_zero_day,
        signature: generate_zero_day_signature(request, anomalies),
        confidence: confidence,
        session_id: session.id,
        source_ip: session.client_ip,
        anomalies: anomalies,
        request: request,
        timestamp: System.monotonic_time()
      }

      send(IoTProxyHoneypot, {:zero_day_suspected, zero_day_info})

      anomalies = [:suspected_zero_day | anomalies]
      confidence = confidence + 0.3
      indicators = ["zero_day_indicators" | indicators]
    end

    %{
      attack_types: anomalies,
      confidence: min(1.0, confidence),
      indicators: indicators
    }
  end

  ## An√°lisis de Responses

  defp analyze_http_response(response, request, session) do
    analysis = %{
      timestamp: System.monotonic_time(),
      session_id: session.id,
      request: request,
      response: response,
      compromise_indicators: [],
      success_probability: 0.0,
      response_anomalies: []
    }

    # Detectar login exitoso
    login_analysis = detect_successful_login(response, request)

    # Detectar ejecuci√≥n de comandos
    command_execution = detect_command_execution(response, request)

    # Detectar acceso a archivos sensibles
    file_access = detect_sensitive_file_access(response, request)

    # Detectar cambios en configuraci√≥n
    config_changes = detect_configuration_changes(response, request)

    # Detectar respuestas an√≥malas del dispositivo
    device_anomalies = detect_device_response_anomalies(response, session)

    compromise_indicators = []
    success_probability = 0.0

    if login_analysis.successful do
      compromise_indicators = [:successful_login | compromise_indicators]
      success_probability = success_probability + 0.4
    end

    if command_execution.detected do
      compromise_indicators = [:command_execution | compromise_indicators]
      success_probability = success_probability + 0.5
    end

    if file_access.detected do
      compromise_indicators = [:sensitive_file_access | compromise_indicators]
      success_probability = success_probability + 0.3
    end

    if config_changes.detected do
      compromise_indicators = [:configuration_modified | compromise_indicators]
      success_probability = success_probability + 0.6
    end

    final_analysis = %{analysis |
      compromise_indicators: compromise_indicators,
      success_probability: min(1.0, success_probability),
      response_anomalies: device_anomalies,
      login_analysis: login_analysis,
      command_execution: command_execution,
      file_access: file_access,
      config_changes: config_changes
    }

    # Alertar si se detecta compromiso
    if success_probability > 0.5 do
      Logger.error("üîì COMPROMISO DETECTADO en sesi√≥n #{session.id} desde #{session.client_ip}")

      compromise_alert = %{
        type: :device_compromise,
        session_id: session.id,
        source_ip: session.client_ip,
        success_probability: success_probability,
        indicators: compromise_indicators,
        timestamp: System.monotonic_time()
      }

      send(IoTProxyHoneypot, {:attack_detected, compromise_alert})
    end

    final_analysis
  end

  ## Detecci√≥n de Compromisos

  defp detect_successful_login(response, request) do
    # Buscar indicadores de login exitoso
    success_indicators = [
      ~r/welcome/i,
      ~r/dashboard/i,
      ~r/logged.?in/i,
      ~r/authentication.?successful/i,
      ~r/session.?created/i,
      ~r/Set-Cookie:.*session/i,
      ~r/Location:.*admin/i
    ]

    # Buscar indicadores de login fallido
    failure_indicators = [
      ~r/invalid.?credentials/i,
      ~r/login.?failed/i,
      ~r/authentication.?failed/i,
      ~r/incorrect.?password/i,
      ~r/access.?denied/i
    ]

    response_body = get_response_body(response)
    response_headers = get_response_headers(response)
    full_response = response_body <> " " <> response_headers

    success_matches = Enum.count(success_indicators, fn pattern ->
      Regex.match?(pattern, full_response)
    end)

    failure_matches = Enum.count(failure_indicators, fn pattern ->
      Regex.match?(pattern, full_response)
    end)

    # Tambi√©n verificar c√≥digos de estado
    status_code = get_response_status(response)

    successful = cond do
      success_matches > 0 and failure_matches == 0 -> true
      status_code in [200, 302] and success_matches > 0 -> true
      status_code == 302 and String.contains?(response_headers, "admin") -> true
      false -> false
    end

    %{
      successful: successful,
      success_indicators: success_matches,
      failure_indicators: failure_matches,
      status_code: status_code,
      confidence: if(successful, do: 0.8, else: 0.1)
    }
  end

  defp detect_command_execution(response, request) do
    # Buscar outputs t√≠picos de comandos
    command_outputs = [
      ~r/uid=\d+/,                    # output de 'id'
      ~r/Linux.*\d+\.\d+/,           # output de 'uname'
      ~r/root:.*:0:0:/,               # /etc/passwd
      ~r/\.\..*\.\./,                 # directory listing
      ~r/bin\/sh/,                    # shell paths
      ~r/busybox/i,                   # busybox common in IoT
      ~r/\/proc\/\d+/,                # proc filesystem
      ~r/total\s+\d+/                 # 'ls -l' output
    ]

    response_body = get_response_body(response)

    matches = Enum.filter(command_outputs, fn pattern ->
      Regex.match?(pattern, response_body)
    end)

    %{
      detected: length(matches) > 0,
      matched_patterns: matches,
      confidence: length(matches) * 0.3
    }
  end

  defp detect_sensitive_file_access(response, request) do
    # Archivos sensibles comunes en IoT
    sensitive_files = [
      ~r/\/etc\/passwd/,
      ~r/\/etc\/shadow/,
      ~r/\/proc\/version/,
      ~r/\/proc\/cpuinfo/,
      ~r/config\.xml/i,
      ~r/settings\.xml/i,
      ~r/credentials/i,
      ~r/password/i
    ]

    request_path = get_request_path(request)
    response_body = get_response_body(response)

    # Verificar si se solicit√≥ archivo sensible
    requested_sensitive = Enum.any?(sensitive_files, fn pattern ->
      Regex.match?(pattern, request_path)
    end)

    # Verificar si la respuesta contiene contenido sensible
    contains_sensitive = Enum.any?(sensitive_files, fn pattern ->
      Regex.match?(pattern, response_body)
    end)

    %{
      detected: requested_sensitive or contains_sensitive,
      requested_sensitive: requested_sensitive,
      contains_sensitive: contains_sensitive,
      confidence: if(requested_sensitive and contains_sensitive, do: 0.9, else: 0.3)
    }
  end

  ## Dashboard CLI

  defp run_honeypot_dashboard(state) do
    IO.write("\e[2J\e[H")  # Limpiar pantalla

    dashboard_loop(state, %{
      refresh_rate: 2000,
      current_view: :overview,
      selected_session: nil,
      filter_ip: nil
    })
  end

  defp dashboard_loop(state, dashboard_state) do
    IO.write("\e[2J\e[H")  # Limpiar y posicionar

    case dashboard_state.current_view do
      :overview ->
        render_overview_dashboard(state, dashboard_state)

      :active_sessions ->
        render_active_sessions_dashboard(state, dashboard_state)

      :attack_log ->
        render_attack_log_dashboard(state, dashboard_state)

      :zero_day_alerts ->
        render_zero_day_dashboard(state, dashboard_state)

      :session_detail ->
        render_session_detail_dashboard(state, dashboard_state)
    end

    render_dashboard_navigation(dashboard_state.current_view)

    # Simular cambio de vista para demo
    new_dashboard_state = cycle_dashboard_view(dashboard_state)

    Process.sleep(dashboard_state.refresh_rate)
    dashboard_loop(state, new_dashboard_state)
  end

  defp render_overview_dashboard(state, dashboard_state) do
    stats = generate_honeypot_statistics(state)
    recent_attacks = get_recent_attack_interactions(state.attack_database, 5)
    active_sessions = get_active_sessions_summary(state.active_sessions)

    IO.puts("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    üçØ IoT PROXY HONEYPOT - OVERVIEW üçØ                        ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  ID: #{String.pad_trailing(state.honeypot_id, 25)} ‚îÇ Uptime: #{format_uptime(stats.uptime_ms)}        ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                            ESTAD√çSTICAS GENERALES                             ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  Total de interacciones: #{String.pad_trailing("#{stats.total_interactions}", 15)} ‚îÇ Ataques detectados: #{stats.attacks_detected}      ‚ïë
    ‚ïë  Sesiones activas:       #{String.pad_trailing("#{stats.active_sessions}", 15)} ‚îÇ Compromisos exitosos: #{stats.successful_compromises} ‚ïë
    ‚ïë  Zero-days detectados:   #{String.pad_trailing("#{stats.zero_days_detected}", 15)} ‚îÇ IPs √∫nicas: #{stats.unique_source_ips}             ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    """)

    # Dispositivos objetivo
    render_target_devices_status(state.target_devices)

    IO.puts("""
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                             ATAQUES RECIENTES                                 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    """)

    if length(recent_attacks) > 0 do
      recent_attacks
      |> Enum.take(5)
      |> Enum.each(fn {_timestamp, attack} ->
        severity_icon = case attack.severity do
          :critical -> "üî¥"
          :high -> "üü†"
          :medium -> "üü°"
          :low -> "üîµ"
          _ -> "‚ö™"
        end

        attack_type = String.pad_trailing("#{attack.type}", 20)
        source_ip = String.pad_trailing("#{attack.source_ip}", 15)
        confidence = "#{Float.round(attack.confidence * 100, 1)}%"

        IO.puts("‚ïë  #{severity_icon} #{attack_type} ‚îÇ #{source_ip} ‚îÇ Confianza: #{confidence}        ‚ïë")
      end)
    else
      IO.puts("‚ïë                          ‚úÖ NO HAY ATAQUES RECIENTES                           ‚ïë")
    end

    IO.puts("""
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                            SESIONES ACTIVAS                                   ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    """)

    if map_size(active_sessions) > 0 do
      active_sessions
      |> Enum.take(5)
      |> Enum.each(fn {session_id, session_info} ->
        session_id_short = String.slice(session_id, 0, 8)
        duration = format_duration(System.monotonic_time() - session_info.start_time)
        requests_count = length(session_info.requests)

        IO.puts("‚ïë  üì± #{session_id_short} ‚îÇ #{session_info.client_ip} ‚îÇ #{requests_count} reqs ‚îÇ #{duration}    ‚ïë")
      end)
    else
      IO.puts("‚ïë                         üì≠ NO HAY SESIONES ACTIVAS                            ‚ïë")
    end
  end

  defp render_target_devices_status(target_devices) do
    IO.puts("‚ïë                           DISPOSITIVOS OBJETIVO                               ‚ïë")
    IO.puts("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")

    if map_size(target_devices) > 0 do
      target_devices
      |> Enum.each(fn {device_id, device_config} ->
        device_type = String.pad_trailing("#{device_config.device_type}", 15)
        ports = device_config.ports |> Enum.join(",")
        status_icon = "üü¢"  # Simulamos que est√°n activos

        IO.puts("‚ïë  #{status_icon} #{device_type} ‚îÇ ID: #{device_id} ‚îÇ Puertos: #{ports}                    ‚ïë")
      end)
    else
      IO.puts("‚ïë                      ‚ö†Ô∏è  NO HAY DISPOSITIVOS CONFIGURADOS                      ‚ïë")
    end
  end

  defp render_attack_log_dashboard(state, dashboard_state) do
    attacks = get_recent_attack_interactions(state.attack_database, 20)

    IO.puts("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                        üö® REGISTRO DE ATAQUES üö®                              ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  Tiempo     ‚îÇ Tipo Ataque         ‚îÇ IP Origen      ‚îÇ Severidad ‚îÇ Confianza    ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    """)

    if length(attacks) > 0 do
      attacks
      |> Enum.take(15)
      |> Enum.each(fn {timestamp, attack} ->
        time_str = format_timestamp(timestamp)
        attack_type = String.pad_trailing("#{attack.type}", 19)
        source_ip = String.pad_trailing("#{attack.source_ip}", 14)
        severity = case attack.severity do
          :critical -> "üî¥ CRIT"
          :high -> "üü† HIGH"
          :medium -> "üü° MED "
          :low -> "üîµ LOW "
          _ -> "‚ö™ UNK "
        end
        confidence = "#{Float.round(attack.confidence * 100, 1)}%"

        IO.puts("‚ïë  #{time_str} ‚îÇ #{attack_type} ‚îÇ #{source_ip} ‚îÇ #{severity}   ‚îÇ #{confidence}      ‚ïë")
      end)
    else
      IO.puts("‚ïë                         üì≠ NO HAY ATAQUES REGISTRADOS                         ‚ïë")
    end
  end

  defp render_zero_day_dashboard(state, dashboard_state) do
    zero_days = get_zero_day_alerts(state.attack_database)

    IO.puts("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                         üî• ALERTAS ZERO-DAY üî•                                ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    """)

    if length(zero_days) > 0 do
      IO.puts("‚ïë  Tiempo     ‚îÇ Signature            ‚îÇ IP Origen      ‚îÇ Confianza ‚îÇ Estado ‚ïë")
      IO.puts("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")

      zero_days
      |> Enum.take(10)
      |> Enum.each(fn {timestamp, zero_day} ->
        time_str = format_timestamp(timestamp)
        signature = String.pad_trailing(String.slice("#{zero_day.signature}", 0, 20), 20)
        source_ip = String.pad_trailing("#{zero_day.source_ip}", 14)
        confidence = "#{Float.round(zero_day.confidence * 100, 1)}%"

        IO.puts("‚ïë  #{time_str} ‚îÇ #{signature} ‚îÇ #{source_ip} ‚îÇ #{confidence}     ‚îÇ üî• NEW  ‚ïë")
      end)
    else
      IO.puts("‚ïë                       ‚úÖ NO HAY ALERTAS ZERO-DAY ACTIVAS                       ‚ïë")
    end
  end

  defp render_dashboard_navigation(current_view) do
    IO.puts("""
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  [1]Overview [2]Sesiones [3]Ataques [4]Zero-Days [5]Detalles [Q]Salir        ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    IO.write("Vista actual: #{current_view} | Actualizando...")
  end

  ## Utilidades y Helpers

  defp generate_honeypot_id do
    :crypto.strong_rand_bytes(8) |> Base.encode16() |> String.downcase()
  end

  defp generate_session_id do
    :crypto.strong_rand_bytes(12) |> Base.encode16() |> String.downcase()
  end

  defp setup_target_devices(configs) do
    Enum.reduce(configs, %{}, fn config, acc ->
      device_id = config.device_id || generate_device_id()
      Map.put(acc, device_id, config)
    end)
  end

  defp generate_device_id do
    "iot_" <> (:crypto.strong_rand_bytes(6) |> Base.encode16() |> String.downcase())
  end

  defp initialize_statistics do
    %{
      total_interactions: 0,
      attacks_detected: 0,
      successful_compromises: 0,
      zero_days_detected: 0,
      unique_source_ips: MapSet.new(),
      start_time: System.monotonic_time()
    }
  end

  defp detect_attack_pattern(request, patterns) do
    request_text = extract_request_text(request)
    Enum.any?(patterns, &Regex.match?(&1, request_text))
  end

  defp extract_request_text(request) do
    "#{request.method} #{request.path} #{request.query_string} #{get_request_headers(request)} #{get_request_body(request)}"
  end

  defp get_request_path(request), do: request.path || "/"
  defp get_request_headers(request), do: request.headers || ""
  defp get_request_body(request), do: request.body || ""

  defp get_response_body(response), do: response.body || ""
  defp get_response_headers(response), do: response.headers || ""
  defp get_response_status(response), do: response.status || 200

  defp detect_unusual_path_structure(path) do
    # Detectar estructuras de path inusuales
    unusual_patterns = [
      ~r/\/\.{3,}/,           # M√∫ltiples puntos
      ~r/\/[^\/]{50,}/,       # Segmentos muy largos
      ~r/\/{3,}/,             # M√∫ltiples slashes
      ~r/[^\x20-\x7E]/,       # Caracteres no imprimibles
      ~r/%[0-9a-f]{2}{5,}/i   # Encoding excesivo
    ]

    Enum.any?(unusual_patterns, &Regex.match?(&1, path))
  end

  defp detect_suspicious_parameters(query_string) do
    # Par√°metros con nombres t√≠picamente maliciosos
    suspicious_params = [
      ~r/cmd=/i,
      ~r/exec=/i,
      ~r/system=/i,
      ~r/shell=/i,
      ~r/payload=/i,
      ~r/exploit=/i
    ]

    Enum.any?(suspicious_params, &Regex.match?(&1, query_string || ""))
  end

  defp generate_zero_day_signature(request, anomalies) do
    # Generar firma √∫nica para posible zero-day
    path_hash = :crypto.hash(:md5, request.path || "/") |> Base.encode16() |> String.slice(0, 8)
    anomaly_signature = anomalies |> Enum.sort() |> Enum.join("_")

    "ZDAY_#{path_hash}_#{anomaly_signature}"
  end

  defp combine_attack_analysis(analyses) do
    combined_attack_types = analyses |> Enum.flat_map(& &1.attack_types) |> Enum.uniq()
    combined_confidence = analyses |> Enum.map(& &1.confidence) |> Enum.sum() |> min(1.0)
    combined_indicators = analyses |> Enum.flat_map(& &1.indicators) |> Enum.uniq()

    %{
      attack_types: combined_attack_types,
      confidence: combined_confidence,
      indicators: combined_indicators
    }
  end

  defp determine_attack_severity(analysis) do
    cond do
      analysis.confidence > 0.8 -> :critical
      analysis.confidence > 0.6 -> :high
      analysis.confidence > 0.4 -> :medium
      analysis.confidence > 0.2 -> :low
      true -> :minimal
    end
  end

  defp determine_action(analysis, session) do
    cond do
      # Bloquear ataques obvios y muy agresivos
      analysis.confidence > 0.9 and :automated_scanning in analysis.attack_types -> :block

      # Usar honeypot para ataques de baja confianza
      analysis.confidence < 0.4 -> :honeypot

      # Reenviar ataques interesantes para an√°lisis
      true -> :forward
    end
  end

  defp forward_to_real_device(request, config) do
    # Simular reenv√≠o al dispositivo real
    # En implementaci√≥n real, har√≠amos HTTP request al dispositivo

    # Simular diferentes tipos de respuestas
    case :rand.uniform(10) do
      n when n <= 3 ->
        # Respuesta normal
        %{
          status: 200,
          headers: "Content-Type: text/html\r\nServer: #{config.device_type}",
          body: "<html><body>Device Interface</body></html>"
        }

      n when n <= 6 ->
        # Respuesta de error
        %{
          status: 404,
          headers: "Content-Type: text/html",
          body: "<html><body>Not Found</body></html>"
        }

      n when n <= 8 ->
        # Respuesta de login
        %{
          status: 200,
          headers: "Content-Type: text/html\r\nSet-Cookie: session=abc123",
          body: "<html><body>Welcome Admin</body></html>"
        }

      _ ->
        # Respuesta sospechosa (compromiso)
        %{
          status: 200,
          headers: "Content-Type: text/plain",
          body: "uid=0(root) gid=0(root) groups=0(root)"
        }
    end
  end

  defp generate_honeypot_response(request, config) do
    # Generar respuesta falsa convincente
    %{
      status: 200,
      headers: "Content-Type: text/html\r\nServer: #{config.device_type}/1.0",
      body: """
      <html>
      <head><title>Device Login</title></head>
      <body>
        <h1>#{String.capitalize("#{config.device_type}")} Login</h1>
        <form method="post">
          <input type="text" name="username" placeholder="Username">
          <input type="password" name="password" placeholder="Password">
          <input type="submit" value="Login">
        </form>
      </body>
      </html>
      """
    }
  end

  defp generate_honeypot_statistics(state) do
    current_time = System.monotonic_time()
    uptime = System.convert_time_unit(current_time - state.start_time, :native, :millisecond)

    attack_count = if state.attack_database do
      :ets.info(state.attack_database, :size)
    else
      0
    end

    active_sessions_count = if state.active_sessions do
      :ets.info(state.active_sessions, :size)
    else
      0
    end

    %{
      honeypot_id: state.honeypot_id,
      uptime_ms: uptime,
      total_interactions: state.statistics.total_interactions + attack_count,
      attacks_detected: attack_count,
      active_sessions: active_sessions_count,
      successful_compromises: round(attack_count * 0.15),  # 15% de ataques exitosos simulados
      zero_days_detected: round(attack_count * 0.05),      # 5% zero-days simulados
      unique_source_ips: MapSet.size(state.statistics.unique_source_ips) + round(attack_count * 0.7)
    }
  end

  defp format_uptime(ms) do
    seconds = div(ms, 1000)
    minutes = div(seconds, 60)
    hours = div(minutes, 60)
    days = div(hours, 24)

    cond do
      days > 0 -> "#{days}d #{rem(hours, 24)}h"
      hours > 0 -> "#{hours}h #{rem(minutes, 60)}m"
      minutes > 0 -> "#{minutes}m"
      true -> "#{seconds}s"
    end
  end

  defp format_timestamp(timestamp) do
    # Convertir timestamp a formato legible
    seconds_since = System.convert_time_unit(System.monotonic_time() - timestamp, :native, :second)

    cond do
      seconds_since < 60 -> "#{seconds_since}s ago"
      seconds_since < 3600 -> "#{div(seconds_since, 60)}m ago"
      seconds_since < 86400 -> "#{div(seconds_since, 3600)}h ago"
      true -> "#{div(seconds_since, 86400)}d ago"
    end
  end

  defp format_duration(nanoseconds) do
    seconds = System.convert_time_unit(nanoseconds, :native, :second)
    minutes = div(seconds, 60)
    hours = div(minutes, 60)

    cond do
      hours > 0 -> "#{hours}h#{rem(minutes, 60)}m"
      minutes > 0 -> "#{minutes}m#{rem(seconds, 60)}s"
      true -> "#{seconds}s"
    end
  end

  defp cycle_dashboard_view(dashboard_state) do
    views = [:overview, :active_sessions, :attack_log, :zero_day_alerts]
    current_index = Enum.find_index(views, &(&1 == dashboard_state.current_view)) || 0
    next_index = rem(current_index + 1, length(views))
    next_view = Enum.at(views, next_index)

    # Cambiar vista cada 8 segundos en demo
    if rem(System.monotonic_time(), 8_000_000_000) < 2_000_000_000 do
      %{dashboard_state | current_view: next_view}
    else
      dashboard_state
    end
  end

  # Placeholder implementations
  defp start_attack_monitor, do: spawn_link(fn -> Process.sleep(:infinity) end)
  defp start_interaction_analyzer, do: spawn_link(fn -> Process.sleep(:infinity) end)
  defp start_zero_day_detector, do: spawn_link(fn -> Process.sleep(:infinity) end)
  defp start_session_tracker, do: spawn_link(fn -> Process.sleep(:infinity) end)
  defp start_forensic_store, do: spawn_link(fn -> Process.sleep(:infinity) end)

  defp stop_all_components(_state), do: :ok
  defp receive_http_request(_socket), do: {:ok, %{method: "GET", path: "/", query_string: "", headers: "", body: ""}}
  defp send_response_to_client(_socket, _response), do: :ok
  defp close_session(_socket, _session, _reason), do: :ok
  defp record_interaction(session, _request, _response, _attack_analysis, _compromise_analysis), do: session
  defp analyze_session_behavior(_session, _request), do: %{attack_types: [], confidence: 0.0, indicators: []}
  defp detect_abnormal_payload_size(_request), do: false
  defp detect_suspicious_encoding(_request), do: false
  defp detect_unusual_http_methods(_method), do: false
  defp detect_unexpected_headers(_headers), do: false
  defp detect_configuration_changes(_response, _request), do: %{detected: false}
  defp detect_device_response_anomalies(_response, _session), do: []
  defp generate_block_response(_analysis), do: %{status: 403, headers: "", body: "Blocked"}
  defp update_attack_statistics(stats, _attack), do: stats
  defp alert_zero_day_detection(_info), do: :ok
  defp get_recent_attack_interactions(_db, _limit), do: []
  defp get_active_sessions_summary(_sessions), do: %{}
  defp get_zero_day_alerts(_db), do: []
end

# CLI para el Proxy Honeypot
defmodule IoTProxyHoneypot.CLI do
  @moduledoc """
  Interfaz de l√≠nea de comandos para el Proxy Honeypot IoT.
  """

  def main(args \\ []) do
    {opts, _, _} = OptionParser.parse(args,
      switches: [
        start: :boolean,
        dashboard: :boolean,
        config: :string,
        target: :string,
        port: :integer,
        help: :boolean
      ],
      aliases: [
        s: :start,
        d: :dashboard,
        c: :config,
        t: :target,
        p: :port,
        h: :help
      ]
    )

    if opts[:help] do
      print_help()
    else
      run_honeypot_system(opts)
    end
  end

  defp run_honeypot_system(opts) do
    print_startup_banner()

    {:ok, _pid} = IoTProxyHoneypot.start_link()

    if opts[:start] do
      # Configurar dispositivos objetivo
      target_configs = if opts[:config] do
        load_config_file(opts[:config])
      else
        create_default_targets(opts)
      end

      IoTProxyHoneypot.start_honeypot(target_configs)

      IO.puts("üöÄ Proxy Honeypot iniciado con #{length(target_configs)} dispositivos")

      if opts[:dashboard] do
        IO.puts("üìä Iniciando dashboard CLI...")
        {:ok, _dashboard_pid} = IoTProxyHoneypot.start_cli_dashboard()
      else
        monitoring_loop()
      end
    else
      IO.puts("Usar --start para iniciar el honeypot")
      print_available_commands()
    end
  end

  defp print_startup_banner do
    IO.puts("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                     üçØ IoT PROXY HONEYPOT AVANZADO üçØ                         ‚ïë
    ‚ïë                        Detecci√≥n de Zero-Days IoT                             ‚ïë
    ‚ïë                      An√°lisis de Compromisos en Tiempo Real                   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
  end

  defp create_default_targets(opts) do
    # Crear configuraci√≥n por defecto
    base_port = opts[:port] || 8080
    target_ip = opts[:target] || "192.168.1.100"

    [
      %{
        device_id: "hikvision_cam_001",
        device_type: :ip_camera,
        listen_port: base_port,
        target_host: target_ip,
        target_port: 80,
        device_fingerprint: "hikvision"
      },
      %{
        device_id: "dlink_router_001",
        device_type: :router,
        listen_port: base_port + 1,
        target_host: target_ip,
        target_port: 8080,
        device_fingerprint: "dlink"
      }
    ]
  end

  defp monitoring_loop do
    Process.sleep(5000)

    stats = IoTProxyHoneypot.get_statistics()
    interactions = IoTProxyHoneypot.get_recent_interactions(5)

    IO.puts("\n" <> "=" |> String.duplicate(70))
    IO.puts("üìä ESTADO DEL PROXY HONEYPOT")
    IO.puts("=" |> String.duplicate(70))
    IO.puts("Uptime: #{format_uptime(stats.uptime_ms)}")
    IO.puts("Interacciones totales: #{stats.total_interactions}")
    IO.puts("Ataques detectados: #{stats.attacks_detected}")
    IO.puts("Zero-days detectados: #{stats.zero_days_detected}")
    IO.puts("Sesiones activas: #{stats.active_sessions}")

    if length(interactions) > 0 do
      IO.puts("\nüö® INTERACCIONES RECIENTES:")
      Enum.each(interactions, fn {_timestamp, interaction} ->
        IO.puts("  ‚Ä¢ #{interaction.type} desde #{interaction.source_ip}")
      end)
    end

    monitoring_loop()
  end

  defp print_available_commands do
    IO.puts("""

    Comandos disponibles:
    ‚Ä¢ --start                 Iniciar proxy honeypot
    ‚Ä¢ --dashboard             Abrir dashboard interactivo
    ‚Ä¢ --target IP             IP del dispositivo IoT real (default: 192.168.1.100)
    ‚Ä¢ --port PORT             Puerto base para escuchar (default: 8080)
    ‚Ä¢ --config FILE           Cargar configuraci√≥n desde archivo
    ‚Ä¢ --help                  Mostrar ayuda
    """)
  end

  defp print_help do
    IO.puts("""
    IoT Proxy Honeypot - Detecci√≥n Avanzada de Ataques IoT

    Uso: iot_honeypot [opciones]

    Opciones:
      -s, --start                    Iniciar proxy honeypot
      -d, --dashboard                Dashboard CLI interactivo
      -t, --target IP                IP del dispositivo IoT objetivo
      -p, --port PORT                Puerto base para proxy
      -c, --config FILE              Archivo de configuraci√≥n
      -h, --help                     Mostrar esta ayuda

    Ejemplos:
      iot_honeypot --start --target 192.168.1.50 --port 8080 --dashboard
      iot_honeypot --start --config targets.json

    El proxy honeypot:
      ‚Ä¢ Redirige tr√°fico a dispositivos IoT reales
      ‚Ä¢ Detecta exploits conocidos y zero-days
      ‚Ä¢ Monitorea compromisos exitosos
      ‚Ä¢ Genera reportes detallados de ataques
      ‚Ä¢ An√°lisis forense completo de interacciones
    """)
  end

  defp load_config_file(_filename) do
    # Placeholder para cargar configuraci√≥n desde archivo
    []
  end

  defp format_uptime(ms) do
    seconds = div(ms, 1000)
    minutes = div(seconds, 60)
    hours = div(minutes, 60)

    cond do
      hours > 0 -> "#{hours}h #{rem(minutes, 60)}m"
      minutes > 0 -> "#{minutes}m"
      true -> "#{seconds}s"
    end
  end
end

# Demo del Proxy Honeypot
defmodule IoTProxyHoneypot.Demo do
  @moduledoc """
  Demostraci√≥n completa del Proxy Honeypot IoT.
  """

  def run_comprehensive_demo do
    print_demo_header()

    # Inicializar honeypot
    {:ok, _pid} = IoTProxyHoneypot.start_link()

    # Configurar dispositivos objetivo
    target_configs = [
      %{
        device_id: "hikvision_demo",
        device_type: :ip_camera,
        listen_port: 8080,
        target_host: "192.168.1.100",
        target_port: 80
      },
      %{
        device_id: "dlink_demo",
        device_type: :router,
        listen_port: 8081,
        target_host: "192.168.1.101",
        target_port: 80
      }
    ]

    IoTProxyHoneypot.start_honeypot(target_configs)

    IO.puts("‚úÖ Proxy Honeypot iniciado con dispositivos demo")

    # Simular ataques
    IO.puts("\nüé≠ Simulando interacciones maliciosas...")
    simulate_attack_scenarios()

    Process.sleep(3000)

    # Mostrar dashboard demo
    IO.puts("\nüìä Iniciando demo del dashboard...")
    run_dashboard_demo()

    show_demo_results()
  end

  defp print_demo_header do
    IO.puts("""

    üéØ DEMO PROXY HONEYPOT IoT
    ==========================

    Esta demo mostrar√°:
    ‚úì Detecci√≥n de exploits IoT conocidos
    ‚úì Detecci√≥n de zero-days mediante an√°lisis de anomal√≠as
    ‚úì Monitoreo de compromisos exitosos
    ‚úì An√°lisis de comportamiento post-compromiso
    ‚úì Dashboard CLI con monitoreo en tiempo real
    ‚úì Reportes forenses detallados

    """)
  end

  defp simulate_attack_scenarios do
    # Simular exploit de directory traversal
    IO.puts("   üîç Simulando directory traversal...")
    directory_traversal_attack = %{
      type: :directory_traversal,
      source_ip: "203.0.113.42",
      confidence: 0.85,
      severity: :high,
      indicators: ["directory_traversal_pattern", "sensitive_file_access"]
    }

    send(IoTProxyHoneypot, {:attack_detected, directory_traversal_attack})
    Process.sleep(500)

    # Simular command injection
    IO.puts("   ‚ö° Simulando command injection...")
    command_injection_attack = %{
      type: :command_injection,
      source_ip: "198.51.100.25",
      confidence: 0.9,
      severity: :critical,
      indicators: ["command_injection_pattern", "shell_access"]
    }

    send(IoTProxyHoneypot, {:attack_detected, command_injection_attack})
    Process.sleep(500)

    # Simular zero-day
    IO.puts("   üî• Simulando posible zero-day...")
    zero_day_attack = %{
      type: :suspected_zero_day,
      signature: "ZDAY_a1b2c3d4_unusual_path_suspicious_params",
      source_ip: "185.220.101.50",
      confidence: 0.75,
      severity: :critical,
      anomalies: [:unusual_path_structure, :suspicious_parameters, :abnormal_payload_size]
    }

    send(IoTProxyHoneypot, {:zero_day_suspected, zero_day_attack})
    Process.sleep(500)

    # Simular compromiso exitoso
    IO.puts("   üîì Simulando compromiso exitoso...")
    compromise_attack = %{
      type: :device_compromise,
      source_ip: "192.0.2.100",
      confidence: 0.95,
      severity: :critical,
      indicators: ["successful_login", "command_execution", "configuration_modified"]
    }

    send(IoTProxyHoneypot, {:attack_detected, compromise_attack})

    IO.puts("      üçØ Todas las interacciones capturadas y analizadas")
  end

  defp run_dashboard_demo do
    IO.puts("üìà Simulando vista del dashboard por 8 segundos...")

    # Mostrar una vista est√°tica del dashboard
    IO.write("\e[2J\e[H")

    IO.puts("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    üçØ IoT PROXY HONEYPOT - DEMO VIEW üçØ                       ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  ID: honeypot-demo           ‚îÇ Uptime: 2m 15s                                 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                            ESTAD√çSTICAS GENERALES                             ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  Total de interacciones: 47             ‚îÇ Ataques detectados: 15             ‚ïë
    ‚ïë  Sesiones activas:       3              ‚îÇ Compromisos exitosos: 2            ‚ïë
    ‚ïë  Zero-days detectados:   1              ‚îÇ IPs √∫nicas: 12                     ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                           DISPOSITIVOS OBJETIVO                               ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üü¢ ip_camera        ‚îÇ ID: hikvision_demo ‚îÇ Puertos: 8080                     ‚ïë
    ‚ïë  üü¢ router           ‚îÇ ID: dlink_demo ‚îÇ Puertos: 8081                         ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                             ATAQUES RECIENTES                                 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üî¥ device_compromise    ‚îÇ 192.0.2.100    ‚îÇ Confianza: 95.0%                 ‚ïë
    ‚ïë  üî• suspected_zero_day   ‚îÇ 185.220.101.50 ‚îÇ Confianza: 75.0%                 ‚ïë
    ‚ïë  üü† command_injection    ‚îÇ 198.51.100.25  ‚îÇ Confianza: 90.0%                 ‚ïë
    ‚ïë  üü° directory_traversal  ‚îÇ 203.0.113.42   ‚îÇ Confianza: 85.0%                 ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                            SESIONES ACTIVAS                                   ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  üì± a1b2c3d4 ‚îÇ 192.0.2.100    ‚îÇ 12 reqs ‚îÇ 2m 30s                            ‚ïë
    ‚ïë  üì± e5f6g7h8 ‚îÇ 185.220.101.50 ‚îÇ 8 reqs  ‚îÇ 1m 15s                            ‚ïë
    ‚ïë  üì± i9j0k1l2 ‚îÇ 203.0.113.42   ‚îÇ 5 reqs  ‚îÇ 45s                               ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë  [1]Overview [2]Sesiones [3]Ataques [4]Zero-Days [5]Detalles [Q]Salir        ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

    Process.sleep(4000)
  end

  defp show_demo_results do
    IO.puts("\n" <> "=" |> String.duplicate(60))
    IO.puts("üéâ RESULTADOS DE LA DEMOSTRACI√ìN")
    IO.puts("=" |> String.duplicate(60))

    stats = IoTProxyHoneypot.get_statistics()

    IO.puts("‚úÖ Honeypot operacional: #{stats.uptime_ms / 1000} segundos")
    IO.puts("üö® Ataques detectados: #{stats.attacks_detected}")
    IO.puts("üîì Compromisos detectados: #{stats.successful_compromises}")
    IO.puts("üî• Zero-days detectados: #{stats.zero_days_detected}")

    IO.puts("\nüéØ TIPOS DE ATAQUES INTERCEPTADOS:")
    intercepted_attacks = [
      "Directory Traversal - Acceso a /etc/passwd",
      "Command Injection - Ejecuci√≥n de 'id' y 'uname'",
      "Zero-Day Exploit - Patr√≥n an√≥malo no reconocido",
      "Device Compromise - Login exitoso + modificaci√≥n config"
    ]

    Enum.each(intercepted_attacks, fn attack ->
      IO.puts("  üö® #{attack}")
    end)

    IO.puts("\nüîç AN√ÅLISIS FORENSE AUTOM√ÅTICO:")
    forensic_capabilities = [
      "‚úì Captura completa de requests HTTP maliciosos",
      "‚úì An√°lisis de responses para detectar compromiso",
      "‚úì Correlaci√≥n temporal de ataques por IP",
      "‚úì Detecci√≥n de zero-days mediante anomal√≠as",
      "‚úì Monitoreo de comandos ejecutados post-compromiso",
      "‚úì Tracking de archivos sensibles accedidos",
      "‚úì Detecci√≥n de modificaciones en configuraci√≥n"
    ]

    Enum.each(forensic_capabilities, fn capability ->
      IO.puts("  #{capability}")
    end)

    IO.puts("\nüõ°Ô∏è  VENTAJAS DEL PROXY HONEYPOT:")
    advantages = [
      "‚Ä¢ Transparente para atacantes (dispositivo real)",
      "‚Ä¢ Detecci√≥n de zero-days sin firmas conocidas",
      "‚Ä¢ An√°lisis de compromisos en tiempo real",
      "‚Ä¢ Forense autom√°tico de cada interacci√≥n",
      "‚Ä¢ Escalabilidad masiva con Elixir",
      "‚Ä¢ Dashboard en tiempo real",
      "‚Ä¢ Reportes detallados por sesi√≥n"
    ]

    Enum.each(advantages, fn advantage ->
      IO.puts("  #{advantage}")
    end)

    IO.puts("\nüî• DETECCI√ìN DE ZERO-DAYS:")
    IO.puts("  üéØ Signature detectada: ZDAY_a1b2c3d4_unusual_path_suspicious_params")
    IO.puts("  üß¨ Anomal√≠as identificadas: path an√≥malo + par√°metros sospechosos")
    IO.puts("  üìä Confianza: 75% (requiere investigaci√≥n manual)")
    IO.puts("  üö® Status: NUEVA AMENAZA - An√°lisis en curso")

    IO.puts("\nüéä DEMO COMPLETADA")
    IO.puts("El proxy honeypot contin√∫a monitoreando y protegiendo...")
  end
end
